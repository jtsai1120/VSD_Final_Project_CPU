00000000 00010000 00000010 10010011     // start:                   addi t0, x0, 1          # t0 = f1 = 1
00000000 00010000 00000011 00010011     //                          addi t1, x0, 1          # t1 = f2 = 1
00000000 00010000 00000011 10010011     //                          addi t2, x0, 1          # t2 = pointer point to mem[1]
00000000 00000011 10110010 10000011     //                          ld t0, 0(t2)            # mem[1] = f1
00000000 10000011 10110011 00000011     //                          ld t1, 8(t2)            # mem[2] = f2
00000001 00100000 00001110 00010011     //                          addi t3, x0, 18         # t3 = 18 (number of remaining Fibonacci numbers to calculate)
00000001 00000011 10000011 10010011     //                          addi t2, t2, 16         # t2 = address of mem[3]
00000010 00001110 00000000 01100011     // fib_loop:                beq t3, x0, end         # if t3 == 0, end loop
00000000 01100010 10001110 10000011     //                          add t4, t0, t1          # t4 = f_cur = f_prv1 + f_prv2
00000001 11010011 10110000 00100011     //                          sd t4, 0(t2)            # mem[i] = f_cur
00000000 00000011 00000010 10010011     //                          addi t0, t1, 0          # f_prv2 = f_prv1
00000000 00001110 10000011 00010011     //                          addi t1, t4, 0          # f_prv1 = f_cur
00000000 10000011 10000011 10010011     //                          addi t2, t2, 8          # move to next memory location
11111111 11111110 00001110 00010011     //                          addi t3, t3, -1         # decrement loop counter
11111110 01011111 11110000 01101111     //                          jal x0, fib_loop        # repeat loop
00000000 00000000 00000000 00000000     // end:                     halt
